* Comentarios reiterados para varios de los compa√±eros

** Mutex largo

Tener un bloque tan largo durante el cual (p.ej) los desarrolladores tienen
el acceso exclusivo mediante =mutex= resuelve probablemente la mayor parte
de los problemas de sincronizaci√≥n, pero causa que disminuya la ejecuci√≥n
paralela. ¬°Deben /sostener/ un =mutex= durante /el tiempo m√≠nimo necesario/
para la secci√≥n cr√≠tica!

** ¬°No te repitas! (Don't Repeat Yourself / DRY)

Cuando realizamos ejercicios como este es com√∫n que /copiemos y adecuemos/
c√≥digo, y que aparezca c√≥digo casi id√©ntico duplicado en nuestro
problema. Tal vez /hackers/ y /serfs/ tienen casi exactamente la misma
l√≥gica, o la mayor parte de la l√≥gica de /gatos/ y /ratones/ se parezca
mucho, y se diferenc√≠en s√≥lo en un peque√±o /p√°rrafo/.

Sin embargo, ¬°h√°ganse a la costumbre de no /repetir su c√≥digo/! Intenten
/parametrizar/ las funciones, y exhibir comportamientos ligeramente
distintos /basados en los par√°metros/, no en una funci√≥n completa
diferente/. Adoptar esto como una pr√°ctica habitual les ayudar√°
particularmente cuando tengan que /dar mantenimiento/ a su c√≥digo en el
futuro.

* El cruce del r√≠o
** Alvarez Eduardo, Morales Arumy
- Documentaci√≥n :: [[./AlvarezEduardo-MoralesArumy/Tarea01. Ejercicios_de_Sincronizaci√≥n.pdf][Tarea01. Ejercicios_de_Sincronizaci√≥n.pdf]]
- Archivos :: [[./AlvarezEduardo-MoralesArumy/T01_CruceRio.py][T01_CruceRio.py]]
- Comentarios ::
  - La implementaci√≥n es poco habitual: que se formen primero y suban
    despu√©s no es habitual. ¬°Pero est√° muy bien! üòÉ
  - ‚áí Comentario reiterado: *Mutex largo*
- Calificaci√≥n :: 8

** Luna Diego, Coronado Diego
- Documentaci√≥n :: [[./LunaDiego-CoronadoDiego/LunaDiego-CoronadoDiego_Tarea1_cruce_rio.pdf][LunaDiego-CoronadoDiego_Tarea1_cruce_rio.pdf]]
- Archivos :: [[./LunaDiego-CoronadoDiego/LunaDiego-CoronadoDiego_Tarea1_cruce_rio.py][LunaDiego-CoronadoDiego_Tarea1_cruce_rio.py]]
- Comentarios ::
  - Buen uso de colores, facilita entender la ejecuci√≥n
  - Buena cobertura de comentarios
  - ‚áí Comentario reiterado: *Mutex largo*
- Calificaci√≥n :: 9

** Sierra Mariana y Tapia Andr√©s
- Documentaci√≥n :: [[./SierraMariana-TapiaAndr√©s/README.md][README.md]]
- Archivos :: [[./SierraMariana-TapiaAndr√©s/tarea01.py][tarea01.py]]
- Comentarios ::
  - ¬°Ojo! Si dos alumnos forman equipo, *hagan una √∫nica entrega*, no hagan
    dos entregas independientes.
  - Hace mucho que no ve√≠a una resoluci√≥n basada en /capitanes/ como la
    tuya. ¬°Muy bueno! üòÉ
  - Si bien la l√≥gica es m√°s compleja que en el c√≥digo de tus compa√±eros,
    env√≠as suficientes mensajes descriptivos a consola para entender bien
    el progreso del cruce.
  - ¬°Excelente que manejes un timeout!
  - ‚áí Comentario reiterado: ¬°No te repitas! (DRY): C√≥digo casi id√©ntico
    para /hackers/ y para /serfs/
- Calificaci√≥n :: 10

** Tejeda, Abraham
- Documentaci√≥n :: [[./Tejeda Abraham/Manual, Funcion y logica..pdf][Manual, Funcion y logica..pdf]]
- Archivos :: [[./Tejeda Abraham/cruce_del_rio.py][cruce_del_rio.py]]
- Comentarios ::
  - ¬°Muy buena implementaci√≥n! Orientaci√≥n a objetos, funciones separadas
    granularmente, manejo de parametrizaci√≥n desde l√≠nea de
    comando... ¬°Excelente!
  - Implementaci√≥n que emplea =Lock=, =Barrier= y =Semaphore=. ¬°Excelente!
    üòÉ
  - Es bastante frecuente (dependiendo de las probabilidades especificadas
    con =--p_hacker=, claro) que la √∫ltima balsa no pueda zarpar por no
    lograr un equilibrio, y el programa quede detenido esperando. Ser√≠a
    bueno poder reportar esta situaci√≥n.
- Calificaci√≥n :: 10

* Los alumnos y el asesor
** Avila Alonso, Medina Samuel
- Documentaci√≥n :: [[./AvilaAlonso-MedinaSamuel/Ejercicio_sincronizacion.pdf][Ejercicio_sincronizacion.pdf]]
- Archivos :: [[./AvilaAlonso-MedinaSamuel/main.cpp][main.cpp]]
- Comentarios ::
  - ¬°Vaya! Alumnos que se atreven a /jugar/ con c√≥digo C++. ¬°Excelente! üòÉ
    - ... Pero, siendo un lenguaje que hay que compilar... ¬øNo tendr√≠a que
      haber llevado un =.gitignore=? ü§î
  - Me parece que comenzaron a comentar su c√≥digo previo a la entrega, pero
    √∫nicamente llegaron a detallar la funci√≥n de las cuatro variables de
    par√°metros. Acost√∫mbrense a comentar /mientras se desarrolla/.
    - ¬øY qu√© comentar? Cualquier cosa que les parezca ingeniosa o tal vez
      dif√≠cil de entender.
  - El /sue√±o/ del profesor no est√° implementado mediante sincronizaci√≥n,
    sino que duerme incondicionalmente por 1000 milisegundos. Puede llegar
    un alumno, tocar la puerta... y el profe va a seguir roncando hasta que
    sea su hora de despertar. ¬°Deber√≠a /dormirse/ sobre un mecanismo de
    sincronizac√≠√≥n!
  - Falta tambi√©n se√±alizaci√≥n para notificar al profesor cuando va a
    iniciar una pregunta del estudiante, o al estudiante cuando el profesor
    le termina de responder.
- Calificaci√≥n :: 7

** Casta√±eda Ariana
- Documentaci√≥n :: [[./Casta√±edaAriana/T1_Sistemas_Operativos.pdf][T1_Sistemas_Operativos.pdf]]
- Archivos :: [[./Casta√±edaAriana/alumnos_asesor.py][alumnos_asesor.py]]
- Comentarios ::
  - La l√≥gica que presentas hace que el profesor se duerma entre alumno y
    alumno... /incluso si hay otros alumnos sentados dentro del cub√≠culo/:
    #+begin_src text
      Profesor termin√≥ con el alumno 3.
      Profesor despierta para atender al alumno 6.
      Profesor atendiendo al alumno 6...
      Alumno 6 est√° siendo atendido.
      Profesor termin√≥ con el alumno 6.
      Profesor despierta para atender al alumno 8.
      Profesor atendiendo al alumno 8...
    #+end_src
    Me parece que da muy mala impresi√≥n üòâ
    - El profesor /√∫nicamente debe dormirse/ si el n√∫mero de alumnos que
      est√°n esper√°ndolo (en las sillas o afuera del sal√≥n) es de 0.
    - Y como no puedes despertar si no te dormiste... üòâ
- Calificaci√≥n :: 7.5

** Tapia Angel
- Documentaci√≥n :: [[./TapiaAngel/Resolucion.txt][Resolucion.txt]]
- Archivos :: [[./TapiaAngel/AlumnosAsesor.py][AlumnosAsesor.py]]
- Comentarios ::
  - ¬°Me gusta que tengas un =while True= anidado, y detectes si
    =alumnos_esperando == 0= para /escapar/ del interno con un =break=! Es
    una salida prefectamente v√°lida, y muy poco habitual.
  - Buen estilo de programaci√≥n, buena densidad de comentarios.
- Calificaci√≥n :: 10

* El elevador
** Chavez Alejandro
- Documentaci√≥n :: [[./ChavezAlejandro/Tarea_1_SO.pdf][Tarea_1_SO.pdf]]
- Archivos :: [[./ChavezAlejandro/ejerciciosSincElevador.py][ejerciciosSincElevador.py]], [[./ChavezAlejandro/ejerciciosSincElevadorOri.py][ejerciciosSincElevadorOri.py]], [[./ChavezAlejandro/ejerciciosSincElevadorRef.py][ejerciciosSincElevadorRef.py]]
- Comentarios ::
  - ¬°Excelente documentaci√≥n! Y me parece genial que identifiques (¬°y
    detalles!) los problemas en tus primeras implementaciones.
  - ¬°Excelente que utilices variables de condici√≥n! Como viste (y
    comentaste), son m√°s complejas... pero una vez que las vas /domando/,
    puedes apreciar que son mucho m√°s poderosas.
  - Efectivamente... Ser√≠a mucho mejor que el elevador no pasara su
    existencia /quemando electricidad/ subiendo y bajando en lo que espera
    a ser llamado. Podr√≠as implementar un contador de usuarios pendientes
    de atenci√≥n para reducir el gasto energ√©tico...
  - ¬°Muy bien por el uso de =Event=, la cola de eventos! Ni siquiera les
    mostr√© esta construcci√≥n üòâ
- Calificaci√≥n :: 9

** Garcia Emilio
- Documentaci√≥n :: [[./GarciaEmilio/README.md][README.md]]
- Archivos :: [[./GarciaEmilio/tarea.py][tarea.py]]
- Comentarios ::
  - ‚áí Comentario reiterado: *Mutex largo*
  - Los usuarios hacen espera semi-activa (l√≠neas 65‚Äì73).
    - En vez de un =while= (que, s√≠, tiene una demora de un segundo ‚Äî pero
      es l√≥gica de /espera activa/, ser√≠a m√°s eficiente y correcto que cada
      usuario, tras subir al elevador, se formara en la cola /de su piso
      destino/, y se /durmiera/ hasta que el hilo elevador lo despertara.
    - Tambi√©n podr√≠a resolverse con una /variable de condici√≥n/.
- Calificaci√≥n :: 8

* El servidor Web
** Gonzalez Michelle
- Documentaci√≥n :: [[./GonzalezMichelle/servidor_web.pdf][servidor_web.pdf]]
- Archivos :: [[./GonzalezMichelle/servidor_web.py][servidor_web.py]]
- Comentarios ::
  - En =trabajador()=, haces una doble verificaci√≥n: Recibes una
    se√±alizaci√≥n sobre =sem_hay_peticiones=, pero posteriormente (y con
    =mutex_peticiones=) verificas si hay alg√∫n dato en
    =peticiones_pendientes= (y si no, saltas a =continue=). ¬øPor qu√©? Me
    huele a alg√∫n uso sub√≥ptimo de sincronizaci√≥n.
  - Un asunto menor, aunque algo importante (de forma): El proceso jefe
    deber√≠a estar /esperando por una conexi√≥n/, y deber√≠an aparecer
    procesos cliente (conexiones de red) que lo despertaran y le hicieran
    solicitudes. Los procesos clientes son triviales de implementar, no
    alteran mucho tu l√≥gica, s√≥lo tendr√≠a que agregarse una se√±alizaci√≥n.
- Calificaci√≥n :: 8

** Hernandez Josue, Escobar Victor
- Documentaci√≥n :: [[./HernandezJosue-EscobarVictor/README.txt][README.txt]]
- Archivos :: [[./HernandezJosue-EscobarVictor/Tarea1_refinado.py][Tarea1_refinado.py]]
- Comentarios ::
  - Implementaci√≥n limpia, orientada a objetos
  - ¬°implementan el /refinamiento/ de m√©tricas! ¬°Excelente! (y con una
    interfaz bastante limpia üòÉ)
- Calificaci√≥n :: 10

* Gatos y ratones
** Gabriel Yukioayax
- Documentaci√≥n :: [[./GabrielYukioayax/Gatos y Ratones.pdf][Gatos y Ratones.pdf]], [[./GabrielYukioayax/Gatos y Ratones.txt][Gatos y Ratones.txt]]
- Archivos :: [[./GabrielYukioayax/Gatos y Ratones/Especie.java][Especie.java]], [[./GabrielYukioayax/Gatos y Ratones/Gato.java][Gato.java]], [[./GabrielYukioayax/Gatos y Ratones/GatosyRatones.java][GatosyRatones.java]], [[./GabrielYukioayax/Gatos y Ratones/Platos.java][Platos.java]], [[./GabrielYukioayax/Gatos y Ratones/Raton.java][Raton.java]], [[./GabrielYukioayax/Gatos y Ratones/Sincronizador.java][Sincronizador.java]]
- Comentarios ::
  - Tal vez no me guste Java... ¬°Pero me da mucho gusto que implementen
    algo diferente a la /monocultura/ de Python! üòâ
    - ... Pero, siendo un lenguaje que hay que compilar... ¬øNo tendr√≠a que
      haber llevado un =.gitignore=? ü§î
  - Excelente que emplees primitivas de sincronizaci√≥n distintas de las que
    les ense√±√© (=ReentrantLock=, =Condition=, =ArrayBlockingQueue=...)
  - ‚áí Comentario reiterado: ¬°No te repitas! (DRY): C√≥digo casi id√©ntico
    para =Gato= y para =Raton=
  - El protocolo que siguen, verificando por =Especie.NADIE=, es efectivo,
    pero lleva a la inanici√≥n: si ejecuto con =p=1= (matando la
    concurrencia), el control alterna frecuentemente, pero a partir de
    =p=2=, como /casi/ todo el tiempo hay alg√∫n animal comiendo... La
    probabilidad de cambio de control es muy baja, y terminan comiendo
    primero todos los de un tipo, luego todos los del otro.
    - Podr√≠a reducirse la inanici√≥n obligando a que cada animal s√≥lo tenga
      hambre con determinada probabilidad, o implementando un torniquete
      como el de los /lectores y escritores/...
- Calificaci√≥n :: 8

** Hernandez Jorge, Zamora Antonio
- Documentaci√≥n :: [[./HernandezJorge-ZamoraAntonio/Resoluci√≥n.txt][Resoluci√≥n.txt]]
- Archivos :: [[./HernandezJorge-ZamoraAntonio/GatosRatones.py][GatosRatones.py]]
- Comentarios ::
  - Los ratones verifican que no haya gatos, pero si √©stos aparecen
    posteriormente, van a ser devorados mientras terminan de comer
    - ¬øY nuestro /acuerdo entre caballeros/ de evitar ir a comer si hay
      ratones? üôÅ
    - Una y otra vez, despu√©s de s√≥lo una vuelta, los gatos se comieron al
      100% de los ratones üíÄ
  - Las restricciones m√°ximas (n√∫mero de platos) est√°n bien
    implementados. Veo que /intentaron/ implementar una exclusi√≥n
    categ√≥rica, controlando el n√∫mero de /animales_como_el_actual/
    comiendo, pero no lo hicieron completo
  - Me parece curioso que la acci√≥n de /comerse al rat√≥n/ est√© implementada
    dentro de =raton()= y no de =gato()=: El rat√≥n es el que se da cuenta
    de que le toca morirse.
- Calificaci√≥n :: 6

** Jimenez Evelin, Lara Emmanuel
- Documentaci√≥n :: [[./JimenezEvelin-LaraEmmanuel/Tarea_1_Sistemas_Operativos.pdf][Tarea_1_Sistemas_Operativos.pdf]]
- Archivos :: [[./JimenezEvelin-LaraEmmanuel/gatos_y_ratones-cazar.py.py][gatos_y_ratones-cazar.py.py]], [[./JimenezEvelin-LaraEmmanuel/gatos_y_ratones_sin_cazar.py.py][gatos_y_ratones_sin_cazar.py.py]]
- Comentarios ::
  - Sincronizaci√≥n usando variables de condici√≥n. ¬°Muy bien! üòÉ
  - Entrega de dos versiones, una con el arreglo ‚Äúirreal‚Äù, la otra con
    cacer√≠a. ¬°Excelente!
    - ... Y la diferencia entre ambas versiones es bastante
      significativa.
  - ‚áí Comentado reiterado: *¬°No te repitas! (DRY)*. La duplicaci√≥n de
    l√≥gica entre el par de funciones =gato_entra()= / =gato_sale()= y
    =raton_entra()= / =raton_sale()= es muy alta.
- Calificaci√≥n :: 10

* Santa Claus
** Maya Bruno
- Documentaci√≥n :: [[./MayaBruno/detallesTarea.txt][detallesTarea.txt]]
- Archivos :: [[./MayaBruno/implementacionSanta.py][implementacionSanta.py]]
- Comentarios ::
  - Muy buena interfaz, el manejo de colores permite seguir f√°cilmente de
    qui√©n se trata cada l√≠nea, y das suficiente informaci√≥n en cada mensaje
    para que resulte √∫til.
  - Bien implementado con barreras hechas con sem√°foros üòÉ
    - (¬øpodr√≠a haberte convenido, para mayor simplicidad, utilizar
      directamente objetos =Barrier=?)
    - Ser√≠a una manera de reducir el c√≥digo repetido (‚áí ver comentario
      reiterado: *¬°No te repitas! (DRY)*)
- Calificaci√≥n :: 9
